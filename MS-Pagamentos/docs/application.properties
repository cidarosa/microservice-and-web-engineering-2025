spring.application.name=ms-pagamento

spring.profiles.active=test
spring.jpa.open-in-view=false

# mesmas config. do Server
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# É preciso passar a configuração eureka.client.serviceUrl.defaultZone
# e o localhost 8081, onde o Eureka Server está recebendo as requisições
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka

#define a porta para o Eureka controlar em qual porta ele vai subir o serviço
server.port=0

# Kafka
#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.bootstrap-servers=kafka:9092 - em container
# ip do windows
# spring.kafka.bootstrap-servers=192.168.0.41:9093
spring.kafka.bootstrap-servers=host.docker.internal:9093
spring.kafka.consumer.group-id=grupo-ms
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Define o tamanho da janela deslizante usada para calcular a taxa de falhas.
# Circuit Breaker vai analisar/monitorar as últimas 3 chamadas
# para decidir se deve abrir (parar de tentar) ou fechar (continuar tentando)
# Se for por tempo, por exemplo, .slidingWindowSize=30, 30 segundos
resilience4j.circuitbreaker.instances.atualizarPedido.slidingWindowSize=3

# COUNT_BASED (conta o número de chamadas) - default.
# TIME_BASED - por tempo
resilience4j.circuitbreaker.instances.atualizarPedido.slidingWindowType=COUNT_BASED

# Número mínimo de chamadas que devem acontecer antes do Circuit Breaker
# começar a calcular a taxa de falhas.
# Aqui só depois de pelo menos 2 chamadas ele começa a avaliar se deve abrir ou não.
resilience4j.circuitbreaker.instances.atualizarPedido.minimumNumberOfCalls=2

# Tempo que o Circuit Breaker permanece no estado OPEN (aberto)
# antes de tentar voltar para o estado HALF_OPEN (meio aberto)
# e testar se o serviço voltou ao normal.
# Aqui, ele vai esperar 50 segundos antes de tentar novamente.
resilience4j.circuitbreaker.instances.atualizarPedido.waitDurationInOpenState= 50s

# Identificador para a instância, para executar várias ao mesmo tempo, se necessário.
# Identificador: nome+número inteiro de 1 a 50.
eureka.instance.instance-id=${spring.application.name}:${random.int[1,50]}

